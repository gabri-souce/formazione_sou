    ''' TRACK1 - Step 8 - Script Coding Mirroring'''

cd /var/log #spostamento nella directory dei log
cat /dev/null > messages #trasmette null (che è vuoto) a messages e messages viene svuotato ma non eliminato in modo da permettere ad altri servizi di usarlo
cat /dev/null > wtmp #pulizia del file wtmp (logica uguale)
echo "Log files cleaned up." #genera messaggio

# ============================================================== #

#!/bin/bash   #indica al sistema che deve essere eseguito con interprete bash situato nella directory indicata tramite l'#! 
ROOT_UID=0   #definisce una variabile con valore 0 perche 0 corrisponde a root
 
if [ "$UID" -eq "$ROOT_UID" ] #se ad un utente ($uid) equivale la variabile indicata ossia 0
then #allora
  echo "You are root." #è root
else #altrimenti
  echo "You are just an ordinary user (but mom loves you just the same)." #l' utente è ordinario
fi #chiudi il ciclo
 
exit 0 #termina script dove 0 indica che il comando è stato eseguito correttamente
 
# ============================================================= #
''' Code below will not execute, because the script already exited.
      An alternate method of getting to the root of matters:'''
# ============================================================= #
ROOTUSER_NAME=root #definisce variabile con nome utente root
 
username=`id -nu`   #assegna alla variabile il nome utente corrente tramite (id -nu uguale a whoami) catturando il risultato ed eseguendolo con i backtik 
if [ "$username" = "$ROOTUSER_NAME" ] #se il nome selezionato dalla variabile è uguale al nome inserito nella prima variabile in questo caso root
then #allora
  echo "Rooty, toot, toot. You are root." #messaggio sei root
else #altrimenti
  echo "You are just a regular fella." #messaggio sei un utente regolare
fi #chiudi ciclo


# =============================================================== #
'''Call this script with at least 10 parameters, for example
    ./scriptname 1 2 3 4 5 6 7 8 9 10 (lo script richiede almeno 10 parametri)'''
# =============================================================== #


#!/bin/bash      #indica al sistema che deve essere eseguito con interprete bash situato nella directory indicata tramite l'#!
MINPARAMS=10     #imposta 10 alla variabile che corrisponde al numero minimo di parametri richiesti
 
echo #messaggio vuoto
 
echo "The name of this script is \"$0\"."  #messaggio dove stampa percorso dello script tramite $0 con \ lo esclude dall iddentazione
# Adds ./ for current directory
echo "The name of this script is \"`basename $0`\"."  #messaggio dove stampa nome dello script tramite basename $0 e con \ lo esclude dall identazione
# Strips out path name info (see 'basename')
 
echo #messaggio vuoto
 
if [ -n "$1" ]  #se il primo parametro esiste $1 e NON è vuoto -n
# Tested variable is quoted.
then  #allora
 echo "Parameter #1 is $1" # stampa messaggio del parametro
# Need quotes to escape #
fi #chiudi ciclo
 
 
if [ -n "$2" ]  #Uguale per cicli successivi cambiando il paramentro di selezione
then
 echo "Parameter #2 is $2"
fi
 
if [ -n "$3" ]
then
 echo "Parameter #3 is $3"
fi
 
# ...
# Parameters > $9 must be enclosed in {brackets}.

if [ -n "${10}" ]  #dopo il 9 parametro si deve utilizzare 
then
 echo "Parameter #10 is ${10}"
fi
 
echo "-----------------------------------" #messaggio di separazione
echo "All the command-line parameters are: "$*"" #messaggio che stampa tutti i paramentri $*
 
if [ $# -lt "$MINPARAMS" ] #confronta se i parametri ricevuti sono 10 ($minparams valore inserito in varibile all' inizio)
then #allora
  echo #messaggio vuoto
  echo "This script needs at least $MINPARAMS command-line arguments!" #messaggio di errore dove indica che i parametri richiesti devono essere 10
fi #chiudi ciclo
 
echo #messaggio vuoto
 
exit 0 #chiusura script con codice 0 che indica il comando eseguito correttamente


# ================================================================== #
'''Naked variables - variabili spoglie prive di $ quando vengono assegnate ma NON quando vengono lette
   When is a variable "naked", i.e., lacking the '$' in front?
   When it is being assigned, rather than referenced.'''
# ================================================================== #

 #!/bin/bash     #indica al sistema che deve essere eseguito con interprete bash situato nella directory indicata tramite l'#!
echo #messaggio vuoto
 
# Assignment
a=879 #assegna valore a variabile (naked)
echo "The value of \"a\" is $a." #messaggio che fa riferimento alla variabile per stampare valore assegnato (NON naked perche' in lettura)
 
# Assignment using 'let'
let a=16+5 #assegna valore operazione aritmetica a variabile a tramite let
echo "The value of \"a\" is now $a." #messaggio che fa riferimento alla variabile aper stampare valore assegnato (NON naked)
 
echo #messaggio vuoto
 
# In a 'for' loop (really, a type of disguised assignment):
echo -n "Values of \"a\" in the loop are: " #stampa stringa senza andare a capo -n 
for a in 7 8 9 11 #per ogni volta che la variabile è presente in (ciclo for)
do #ciclo do dove dichiara i comandi da eseguire
  echo -n "$a " #messaggio di stampa del valore di a senza andare a capo -n
done #chiusura ciclo
 
echo #messaggio vuoto
echo #messaggio vuoto
 
# In a 'read' statement (also a type of assignment):
echo -n "Enter \"a\" " #messaggio per chiedere parametro senza andare a capo -n
read a #legge e assegna parametro ad a (naked perche' assegnato)
echo "The value of \"a\" is now $a." #messaggio di stampa parametro inserita dall' utente (NON naked perche in lettura )
 
echo #messaggio vuoto
 
exit 0 #chiusura script con codice 0 che indica il comando eseguito correttamente


# ========================================================================= #
'''By convention, an exit 0 indicates success,
   while a non-zero exit value means an error or anomalous condition.
   See the "Exit Codes With Special Meanings" appendix.'''
# ========================================================================= #

#!/bin/bash   #indica al sistema che deve essere eseguito con interprete bash situato nella directory indicata tramite l'#!
echo hello  #messaggio ciao
echo $?    # Exit status 0 returned because command executed successfully.Stampa exit status dell ultimo comando quindo 0 perche ha avuto successo
 
lskdf      # Unrecognized command.Comando inesistente
echo $?    # Non-zero exit status returned -- command failed to execute.Stampa exit status dell ultimo comando quindo 127 perche NON ha avuto successo
 
echo #messaggio vuoto
 
exit 113 #Non è uno status predefinito della dash ma è usato per terminare lo script con uno status specifico
# Will return 113 to shell. 
# To verify this, type "echo $?" after script terminates.


# ========================================================================== #
'''fetch_address.sh'''  
# ========================================================================== #


#!/bin/bash4  #indica al sistema che deve essere eseguito con interprete bash situato nella directory indicata tramite l'#! 
 
declare -A address #dichiara un array ossia una struttura dati composta da associazione chiave : valore in questo caso la variabile associativa è address
#       -A option declares associative array.
 
address[Charles]="414 W. 10th Ave., Baltimore, MD 21236" #assegna un indirizzo alla chiave charles presente nell array address
address[John]="202 E. 3rd St., New York, NY 10009" #assegna un indirizzo alla chiave jhon presente nell array address
address[Wilma]="1854 Vermont Ave, Los Angeles, CA 90023" #assegna un indirizzo alla chiave wilma presente nell array address
 
 
echo "Charles's address is ${address[Charles]}." #stampa l indirizzo associato a charles preso dall array address
# Charles's address is 414 W. 10th Ave., Baltimore, MD 21236.
echo "Wilma's address is ${address[Wilma]}." ##stampa l indirizzo associato a wilma preso dall array address
# Wilma's address is 1854 Vermont Ave, Los Angeles, CA 90023.
echo "John's address is ${address[John]}." #stampa l indirizzo associato a john preso dall array address
# John's address is 202 E. 3rd St., New York, NY 10009.
 
echo #messaggio vuoto
 
echo "${!address[*]}"   # The array indices ... #stampa tutte le chiavi dell' array associativo
# Charles John Wilma


# =========================================================================== #
''' progress-bar2.sh
Author: Graham Ewart (with reformatting by ABS Guide author).
Used in ABS Guide with permission (thanks!). '''
# =========================================================================== #

#! /bin/bash #indica al sistema che deve essere eseguito con interprete bash situato nella directory indicata tramite l'#!
interval=1 #variabile che stabilisce l intervallo
long_interval=10 #variabile che stabilisce la durata dell operazione
 
{
     trap "exit" SIGUSR1 #usa trap strumento per catturare segnali di sistema ed effetture il comando specifico in questo caso SIGUSR1 terminera il processo
     sleep $interval; sleep $interval #sleep usato per introdurre ritardi temporali utilizzando il parametro della funzione interval
     while true #ciclo while che inizia il loop con parametro booleano true quindi parte da una condizione sempre vera
     do #inizio comandi da eseguire
       echo -n '.'     # Use dots. #stampa un . senza andare a capo -n
       sleep $interval #effettua intervallo chiamando la variabile
     done; } &         # Start a progress bar as a background process. #termina il blocco del loop generato nel ciclo e & continua ad eseguire il processo in background permettendo du usare la dash 
pid=$! #salva l ID del processo appena lanciato in background nella variabile PID
trap "echo !; kill -USR1 $pid; wait $pid"  EXIT       #quando lo scrip termina (trap) stampa !, invia il comando SIGUSR1 (precedentemente dichiarato)al processo in background pid e aspetta che termini con wait ed esce
 
echo -n 'Long-running process ' #stampa senza andare a capo
sleep $long_interval #attesa che dura 10
echo ' Finished!' #stampa
 
kill -USR1 $pid #invia segnale di stop/kill al processo pid che richiamera' trap
wait $pid              # Stop the progress bar. #aspetta che il processo si fermi
trap EXIT #fa uscire dalla funzione di trap
 
exit $? #termina lo script con l ultimmo comando che essendo effettuato con successo dara' 0



